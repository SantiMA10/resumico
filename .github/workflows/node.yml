# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GAR_PROJECT_ID: ${{ secrets.GAR_PROJECT_ID }}
  GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
  GAR_SERVICE: ${{ secrets.GAR_SERVICE }}
  REPOSITORY: ${{ secrets.REPOSITORY }}
  SERVICE: ${{ secrets.SERVICE }}
  REGION: ${{ secrets.REGION }}

jobs:
  test-unit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'yarn'
      - run: yarn install --frozen-lockfile
      - run: 'yarn test'

  deploy-api-beta:
    name: deploy api to beta
    environment: beta
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test-unit]

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Add secrets
        run: 'echo "$SECRETS_ENV" > .env'
        env:
          SECRETS_ENV: ${{ secrets.ENV }}

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'yarn'
      - run: yarn install --frozen-lockfile
      - run: yarn build

      - name: Deploy to AppEngine
        id: 'deploy'
        uses: 'google-github-actions/deploy-appengine@v1'

  deploy-api-prod:
    name: deploy api to prod
    environment: prod
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test-unit]

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Add secrets
        run: 'echo "$SECRETS_ENV" > .env'
        env:
          SECRETS_ENV: ${{ secrets.ENV }}

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'yarn'
      - run: yarn install --frozen-lockfile
      - run: yarn build

      - name: Deploy to AppEngine
        id: 'deploy'
        uses: 'google-github-actions/deploy-appengine@v1'

  build-image:
    name: build image
    environment: prod
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test-unit]

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v2'
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: '${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GAR_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.GAR_SERVICE }}:${{ github.sha }}'
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-worker-beta:
    name: deploy worker to beta
    environment: beta
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test-unit, build-image]

    runs-on: ubuntu-latest
    steps:
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Add secrets
        run: 'echo "$SECRETS_ENV" > .env'
        env:
          SECRETS_ENV: ${{ secrets.ENV }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GAR_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.GAR_SERVICE }}:${{ github.sha }}
          flags: '--max-instances 1 --cpu 1 --memory 2Gi --allow-unauthenticated --ingress internal'
          env_vars_file: './.env'

  deploy-worker-prod:
    name: deploy worker to prod
    environment: prod
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test-unit, build-image]

    runs-on: ubuntu-latest
    steps:
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Add secrets
        run: 'echo "$SECRETS_ENV" > .env'
        env:
          SECRETS_ENV: ${{ secrets.ENV }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GAR_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.GAR_SERVICE }}:${{ github.sha }}
          flags: '--max-instances 1 --cpu 1 --memory 2Gi --allow-unauthenticated --ingress internal'
          env_vars_file: './.env'
